name: Calculate Investment

on:
  workflow_dispatch:
    inputs:
      investment_type:
        description: "Investment Type"
        required: true
        type: choice
        options:
          - tqqq-investment
          - upro-investment
        default: "tqqq-investment"
      asset_price:
        description: "Asset Price (TQQQ or UPRO)"
        required: true
        type: string
        default: "50.25"
      cash_balance:
        description: "Cash Balance Amount"
        required: true
        type: string
        default: "10000.00"
      underlying_asset_price:
        description: "Underlying Asset Price (QQQ or VOO)"
        required: true
        type: string
        default: "500.00"
      underlying_asset_200ma_price:
        description: "Underlying Asset 200MA Price"
        required: true
        type: string
        default: "480.00"

jobs:
  calculate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build TypeScript
        run: npm run build

      - name: Run calculation
        id: calculate
        run: |
          node << 'EOF'
          const { calculate, formatResult } = require('./dist/calculator.js');

          const input = {
            type: '${{ github.event.inputs.investment_type }}',
            assetPrice: parseFloat('${{ github.event.inputs.asset_price }}'),
            cashBalance: parseFloat('${{ github.event.inputs.cash_balance }}'),
            underlyingAssetPrice: parseFloat('${{ github.event.inputs.underlying_asset_price }}'),
            underlyingAsset200MaPrice: parseFloat('${{ github.event.inputs.underlying_asset_200ma_price }}')
          };

          console.log('\n=== Input Parameters ===');
          console.log('Investment Type:', input.type);
          console.log('Asset Price: $' + input.assetPrice.toFixed(2));
          console.log('Cash Balance: $' + input.cashBalance.toFixed(2));
          console.log('Underlying Asset Price: $' + input.underlyingAssetPrice.toFixed(2));
          console.log('Underlying Asset 200MA Price: $' + input.underlyingAsset200MaPrice.toFixed(2));
          
          console.log('\n=== Calculation ===');
          const result = calculate(input);
          console.log(formatResult(result));
          
          // Calculate additional metrics
          const portfolioScaleFactor = Math.max(1, Math.floor(input.cashBalance / 1500));
          const distance = (input.underlyingAssetPrice - input.underlyingAsset200MaPrice) / input.underlyingAsset200MaPrice;
          const distancePercent = (distance * 100).toFixed(2);
          
          console.log('\n=== Details ===');
          console.log('Portfolio Scale Factor:', portfolioScaleFactor);
          console.log('Distance from 200MA:', distancePercent + '%');
          console.log('Distance Status:', distance > 0 ? 'Above 200MA (reducing investment)' : 'Below 200MA (increasing investment)');
          
          // Output for GitHub Actions summary
          const fs = require('fs');
          const summary = `## ðŸ’° Investment Calculator Results

### Input Parameters
- **Investment Type:** ${input.type.toUpperCase().replace('-INVESTMENT', '')}
- **Asset Price:** $${input.assetPrice.toFixed(2)}
- **Cash Balance:** $${input.cashBalance.toFixed(2)}
- **Underlying Asset Price:** $${input.underlyingAssetPrice.toFixed(2)}
- **Underlying Asset 200MA Price:** $${input.underlyingAsset200MaPrice.toFixed(2)}

### Calculation Results
- **Recommended Investment Amount:** $${result.finalInvestment.toFixed(2)}

### Analysis
- **Portfolio Scale Factor:** ${portfolioScaleFactor}x
- **Distance from 200MA:** ${distancePercent}%
- **Market Position:** ${distance > 0 ? 'ðŸ“ˆ Above 200MA (reducing investment)' : 'ðŸ“‰ Below 200MA (increasing investment)'}

---
*This calculation uses dynamic position sizing based on cash balance and distance from 200-day moving average.*
`;
          
          fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY, summary);
          EOF

      - name: Display Summary
        run: |
          echo "âœ… Calculation completed successfully!"
          echo "Check the job summary above for detailed results."

